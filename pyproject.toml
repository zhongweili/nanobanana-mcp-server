[project]
name = "nanobanana-mcp-server"
version = "0.1.5"
description = "A production-ready MCP server for AI-powered image generation using Gemini 2.5 Flash Image"
authors = [
    { name = "Nano Banana Team", email = "team@nanobanana.dev" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["mcp", "ai", "image-generation", "gemini", "fastmcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
]

dependencies = [
    "fastmcp>=2.11.0",
    "google-genai>=0.3.0",
    "pillow>=10.4.0",
    "python-dotenv>=1.0.1",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "fastmcp>=2.11.0",
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
]

docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/nano-banana/mcp-server"
Repository = "https://github.com/nano-banana/mcp-server.git"
Documentation = "https://docs.nanobanana.dev"
"Bug Tracker" = "https://github.com/nano-banana/mcp-server/issues"

[project.scripts]
nanobanana-mcp-server = "nanobanana_mcp_server.server:main"
nanobanana-mcp = "nanobanana_mcp_server.server:main"

[project.entry-points.fastmcp]
nanobanana-mcp-server = "nanobanana_mcp_server.server:create_app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["nanobanana_mcp_server"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "Q",   # flake8-quotes
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "S101",  # use of assert
    "S603",  # subprocess call without shell=True
    "S607",  # starting subprocess with path
    "B008",  # do not perform function calls in argument defaults
    "N805",  # first argument should be self
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs/",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S", "ARG", "T20"]
"__init__.py" = ["F401"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["config", "core", "services", "tools", "resources", "prompts", "utils"]
force-sort-within-sections = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "network: Tests requiring network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["config", "core", "services", "tools", "resources", "prompts", "utils"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2
fail_under = 80

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "fastmcp.*",
    "PIL.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[dependency-groups]
dev = [
    "build>=1.3.0",
    "twine>=6.1.0",
]
